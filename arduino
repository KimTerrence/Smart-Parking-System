#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>

#include <Servo.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);
Servo servo;

const char* ssid = "HUAWEI-E5330-6FF2";
const char* password = "m7t05htj";
const char* serverUrl = "http://192.168.8.108:5000/sensor-data"; 

WiFiClient wifiClient; // Declare WiFiClient object globally

// Define sensor pins
const int sensor1Pin = D3;
const int sensor2Pin = D4;
const int sensor3Pin = D5;
const int sensor4Pin = D6;
const int sensor5Pin = D7; // Analog sensor (if needed)

// Variables to track sensor states
int prevSensorValues[5] = {-1, -1, -1, -1, -1};
const int sensorPins[5] = {sensor1Pin, sensor2Pin, sensor3Pin, sensor4Pin, sensor5Pin};

// Store message from the website
String response = "";

void sendPostRequest(int sensorIndex, int sensorValue) {
  HTTPClient http;
  http.begin(wifiClient, serverUrl);
  http.addHeader("Content-Type", "application/json");

  // Prepare JSON payload
  String payload = "{";
  payload += "\"sensor\": " + String(sensorIndex + 1) + ",";
  payload += "\"value\": " + String(sensorValue);
  payload += "}";

  // Debug payload
  Serial.println("Sending Payload: " + payload);

  int httpCode = http.POST(payload);
  if (httpCode > 0) {
    response = http.getString(); // Capture the response
    Serial.println("Server response: " + response);
  } else {
    Serial.println("Error on HTTP request, Code: " + String(httpCode));
  }
  http.end();
}


// Setup function
void setup() {
  Serial.begin(9600);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Initialize pins
  for (int i = 0; i < 5; i++) {
    pinMode(sensorPins[i], INPUT);
  }

  // Initialize LCD
  lcd.init();
  lcd.backlight();

  // Attach servo
  servo.attach(D8);
}

// Main loop
void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    for (int i = 0; i < 5; i++) {
      int sensorValue = digitalRead(sensorPins[i]);

      // Check if the sensor value has changed
      if (sensorValue != prevSensorValues[i]) {
        sendPostRequest(i, sensorValue);
        prevSensorValues[i] = sensorValue; // Update the previous value
      }
    }
    lcd.setCursor(4, 0);
     lcd.print("WELCOME!");

    // Component Functions (Gate and LCD Logic)
    if (digitalRead(sensorPins[0]) == LOW) { // Sensor1 controls the gate
       lcd.setCursor(0, 1);
        lcd.print("NO SLOT AVAILABLE");
      bool allOccupied = true;
      for (int i = 1; i < 5; i++) {
        if (digitalRead(sensorPins[i]) == HIGH) {
          allOccupied = false;
          break;
        }
      }

      if (allOccupied) {
        servo.write(100);
        lcd.setCursor(0, 1);
        lcd.print("NO SLOT AVAILABLE");
      } else {
        servo.write(5);
        lcd.setCursor(0, 1);
        lcd.print("SLOT AVAILABLE");
        delay(2000);
        Serial.println("Gate open");
      }
    } else {
      servo.write(100);
    }
    lcd.clear();
  }

  delay(500); // Check sensors every half second
}